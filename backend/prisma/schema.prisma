// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 enum ROLE {
  ADMIN
  USER
}

enum STATUS{
  ACTIVE
  DEACTIVATED
  PENDING
}

enum GENDER {
  MALE
  FEMALE
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      ROLE     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String 
  middleName String 
  lastName  String 
  activeStatus STATUS
  Profiles    Profiles[]
  loans     Loans[]
  deposits  Deposits[]
  lots      Lots[]
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String
  amount       Decimal
  commition    Decimal
  createdAt    DateTime  @default(now())
  totalCount   Int
  totalAmount  Decimal
  totalCommition Decimal
  collectionCycle String @default("7days")
  duration  String @default("365")
  lot          Lots[]
}

model Lots {
  id            Int       @id @default(autoincrement())
  categoryId    Int?
  registeredBy  Int
  isCompleted   Boolean
  createdAt     DateTime  @default(now())
  remainingDay    Int 
  remainingAmount Decimal @default(200)
  cumulativePayment Decimal @default(0)
  user          Users      @relation(fields: [registeredBy], references: [id] ,onDelete: Cascade)
  category      Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  profile       Profiles?
  loans         Loans[]
  deposits      Deposits[]
  winners       Winners?
}

model Profiles {
  id         Int       @id @default(autoincrement())
  lotId      Int       @unique
  userId     Int       
  firstName  String
  middleName String
  lastName   String
  gender     GENDER
  city       String
  street     String
  createdAt  DateTime  @default(now())
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot        Lots      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Deposits {
  id        Int       @id @default(autoincrement())
  lotId     Int
  userId    Int
  amount    Decimal
  commition Decimal
  remaining Decimal
  createdAt DateTime  @default(now())
  user      Users      @relation(fields: [userId], references: [id] ,onDelete: Cascade )
  lot       Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
}

model Loans {
  id        Int       @id @default(autoincrement())
  lotId     Int
  userId    Int
  amount    Decimal
  isPaidBack Boolean  @default(false)
  createdAt DateTime  @default(now())
  lot       Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
  user      Users      @relation(fields: [userId], references: [id] ,onDelete: Cascade )
}

model Winners {
  id           Int       @id @default(autoincrement())
  lotId        Int       @unique
  registeredBy Int
  createdAt    DateTime  @default(now())
  lot          Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
}
